package de.sp.database.testdata.books;

import de.sp.database.connection.ConnectionPool;
import de.sp.database.daos.basic.BookCopyDAO;
import de.sp.database.daos.basic.BorrowsDAO;
import de.sp.database.daos.basic.SchoolDAO;
import de.sp.database.daos.basic.SchoolTermDAO;
import de.sp.database.model.BookCopy;
import de.sp.database.model.Borrows;
import de.sp.database.model.School;
import de.sp.database.model.SchoolTerm;
import de.sp.database.statements.StatementStore;
import de.sp.database.stores.SchoolTermStore;
import de.sp.main.config.Configuration;
import de.sp.modules.library.daos.LibraryDAO;
import de.sp.modules.library.servlets.borrow.borrowerlist.BorrowerRecord;
import de.sp.modules.library.reports.reportsschueler.neededbooks.NeededBookRecord;
import de.sp.modules.library.reports.reportsschueler.neededbooks.NeededBooksHelper;
import org.sql2o.Connection;

import java.util.*;

/**
 * Created by Martin on 25.04.2017.
 */
public class BookGenerator {

    public static void main(String[] args) throws Exception {

        Configuration config = Configuration.getInstance();

        StatementStore.readStatements(config.getDatabase().getType());

        ConnectionPool.init(config);

        SchoolTermStore.getInstance().loadFromDatabase();

        Connection con = ConnectionPool.beginTransaction();

        School school = SchoolDAO.findByNumber(con, "0124");

        SchoolTerm schoolTerm = SchoolTermDAO.findBySchoolIdAndTermName(con, school.getId(), "2016/17");

        BookGenerator bg = new BookGenerator();

        bg.execute(school.getId(), schoolTerm.getId(), con);

        con.commit();
        con.close();
    }

    public void execute(Long school_id, Long school_term_id, Connection con) throws Exception {

        List<BorrowerRecord> studentList = LibraryDAO.getBorrowerList(school_id, school_term_id, con, false, false);

        ArrayList<String> classNames = new ArrayList<>();

        HashMap<String, ArrayList<BorrowerRecord>> studentMap = new HashMap<>();

        for (BorrowerRecord br : studentList) {

            ArrayList<BorrowerRecord> classList = studentMap.get(br.getClass_name());

            if(classList == null){
                classList = new ArrayList<>();
                studentMap.put(br.getClass_name(), classList);
                classNames.add(br.getClass_name());
            }

            classList.add(br);

        }

        Collections.sort(classNames);

        Long barcode = 8881000L;


        NeededBooksHelper nbh = new NeededBooksHelper(school_id, con, false, false);

        boolean borrowBooks = true;

        Date now = Calendar.getInstance().getTime();

        for (String className : classNames) {

            System.out.println("Klasse: " + className);

            for (BorrowerRecord br : studentMap.get(className)) {

                List<NeededBookRecord> neededBooks = nbh.getNeededBooks(br, new HashSet<>());

                for (NeededBookRecord neededBook : neededBooks) {

                    BookCopy bookCopy = BookCopyDAO.insert(neededBook.getBook_id(), "1", "" + barcode++, null, con);

                    if (borrowBooks) {
                        Borrows borrows = BorrowsDAO.insert(bookCopy.getId(), br.getStudent_id(), null, now, null, null, "Generated by BookGenerator", false, con);
                    }

                }


            }

            // alternate classes...
            borrowBooks = !borrowBooks;

        }



    }


}
